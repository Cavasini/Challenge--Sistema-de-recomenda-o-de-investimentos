# .github/workflows/ci-cd-main.yml
name: CI/CD - Monorepo (Production)

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]

jobs:
    # Job para detectar quais serviços foram alterados
    detect_changes:
        runs-on: ubuntu-latest
        outputs:
            investmentdataservice_changed: ${{ steps.filter.outputs.investmentdataservice }}
            profileanalyzerservice_changed: ${{ steps.filter.outputs.profileanalyzerservice }}
            recommenderservice_changed: ${{ steps.filter.outputs.recommenderservice }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 2 # Necessário para comparar commits e detectar mudanças

            - name: Check for changes in service folders
              id: filter
              uses: dorny/paths-filter@v3 # Usamos esta action para detectar mudanças em paths específicos
              with:
                  filters: |
                      investmentdataservice:
                        - 'InvestmentDataService/**'
                        - '.github/workflows/ci-cd-main.yml' # Roda se o próprio workflow for alterado
                      profileanalyzerservice:
                        - 'ProfileAnalyzerService/**'
                        - '.github/workflows/ci-cd-main.yml'
                      recommenderservice:
                        - 'RecommenderService/**'
                        - '.github/workflows/ci-cd-main.yml'

    # --- Jobs específicos por serviço (Build JAR, Build Docker, Push Docker) ---

    build_docker_investmentdataservice:
        runs-on: ubuntu-latest
        needs: detect_changes # Depende da detecção de mudanças
        environment: production
        if: needs.detect_changes.outputs.investmentdataservice_changed == 'true' # Só roda se InvestmentDataService mudou
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Java
              uses: actions/setup-java@v3
              with:
                  java-version: "21"
                  distribution: "temurin"

            - name: Build InvestmentDataService JAR
              working-directory: ./InvestmentDataService
              run: mvn clean install

            - name: Log in to Docker Hub
              uses: docker/login-action@v3 # V3 ou V2 ainda é comum e funcional
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build and Push InvestmentDataService Production Image
              working-directory: ./InvestmentDataService
              run: |
                  docker build -t cavasini/investmentdata-service .
                  docker push cavasini/investmentdata-service

    build_docker_profileanalyzerservice:
        runs-on: ubuntu-latest
        needs: detect_changes
        environment: production
        if: needs.detect_changes.outputs.profileanalyzerservice_changed == 'true' # Só roda se ProfileAnalyzerService mudou
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Java
              uses: actions/setup-java@v3
              with:
                  java-version: "21"
                  distribution: "temurin"

            - name: Build ProfileAnalyzerService JAR
              working-directory: ./ProfileAnalyzerService
              run: mvn clean install

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build and Push ProfileAnalyzerService Production Image
              working-directory: ./ProfileAnalyzerService
              run: |
                  docker build -t cavasini/profileanalyzer-service .
                  docker push cavasini/profileanalyzer-service

    build_docker_recommenderservice:
        runs-on: ubuntu-latest
        needs: detect_changes
        environment: production
        if: needs.detect_changes.outputs.recommenderservice_changed == 'true' # Só roda se RecommenderService mudou
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Java
              uses: actions/setup-java@v3
              with:
                  java-version: "21"
                  distribution: "temurin"

            - name: Build RecommenderService JAR
              working-directory: ./RecommenderService
              run: mvn clean install

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build and Push RecommenderService Production Image
              working-directory: ./RecommenderService
              run: |
                  docker build -t cavasini/recommender-service .
                  docker push cavasini/recommender-service

    # --- Exemplo de Jobs de Deploy (um para cada serviço) ---
    # Se o deploy for em Kubernetes, por exemplo, você pode ter um job para cada
    # microserviço que se baseia na imagem Docker recém-construída.

    # deploy_investmentdataservice:
    #   runs-on: ubuntu-latest
    #   needs: [detect_changes, build_docker_investmentdataservice] # Depende da detecção e do build/push do InvestmentDataService
    #   environment: production # Pode ter um ambiente específico para deploy
    #   if: needs.detect_changes.outputs.investmentdataservice_changed == 'true' && always() # `always()` para rodar mesmo se build_docker_investmentdataservice falhar, útil para notificação de falha de deploy. Remova se quiser que só rode se o build for sucesso.
    #   steps:
    #     - name: Deploy InvestmentDataService
    #       run: |
    #         echo "Simulando deploy do InvestmentDataService..."
    #         # Aqui iriam seus comandos de deploy reais, como:
    #         # kubectl apply -f kubernetes/investmentdataservice-deployment.yaml
    #         # Ou chamar um script de deploy, usar Terraform, etc.
    #         # Você pode precisar de ações como 'azure/aks-set-context@v1' ou 'google-github-actions/setup-gcloud@v2'
    #         # e segredos como ${{ secrets.KUBECONFIG_PROD }} ou credenciais cloud.

    # deploy_profileanalyzerservice:
    #   runs-on: ubuntu-latest
    #   needs: [detect_changes, build_docker_profileanalyzerservice]
    #   environment: production
    #   if: needs.detect_changes.outputs.profileanalyzerservice_changed == 'true' && always()
    #   steps:
    #     - name: Deploy ProfileAnalyzerService
    #       run: |
    #         echo "Simulando deploy do ProfileAnalyzerService..."
    #         # Seus comandos de deploy aqui

    # deploy_recommenderservice:
    #   runs-on: ubuntu-latest
    #   needs: [detect_changes, build_docker_recommenderservice]
    #   environment: production
    #   if: needs.detect_changes.outputs.recommenderservice_changed == 'true' && always()
    #   steps:
    #     - name: Deploy RecommenderService
    #       run: |
    #         echo "Simulando deploy do RecommenderService..."
    #         # Seus comandos de deploy aqui
