# .github/workflows/ci-cd-main.yml
name: CI/CD - Main Branch (Production)

on:
    push:
        branches: ["main"] # Aciona apenas quando houver push para a main
    # pull_request:
    #   branches: ["main"] # Normalmente PRs para main são do tipo 'squash and merge' de develop ou feature branches

jobs:
    build_jars:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Java
              uses: actions/setup-java@v3
              with:
                  java-version: "21"
                  distribution: "temurin"

            - name: Build InvestmentDataService JAR
              working-directory: ./InvestmentDataService
              run: mvn clean install

            - name: Build ProfileAnalyzerService JAR
              working-directory: ./ProfileAnalyzerService
              run: mvn clean install

            - name: Build RecommenderService JAR
              working-directory: ./RecommenderService
              run: mvn clean install

    build_and_push_docker_images:
        runs-on: ubuntu-latest
        needs: build_jars # Este job só será executado após 'build_jars' ser concluído com sucesso
        environment: production # Opcional: Define um ambiente no GitHub para gerenciar segredos e revisores
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            # Logar no Docker Hub antes de construir e enviar as imagens
            - name: Log in to Docker Hub
              uses: docker/login-action@v2 # Usar uma action dedicada para login é uma boa prática
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            # Configuração de Docker para build e push das imagens
            - name: Build and Push InvestmentDataService Production Image
              working-directory: ./InvestmentDataService
              run: |
                  docker build -t cavasini/investmentdata-service .
                  docker push cavasini/investmentdata-service

            - name: Build and Push ProfileAnalyzerService Production Image
              working-directory: ./ProfileAnalyzerService
              run: |
                  docker build -t cavasini/profileanalyzer-service .
                  docker push cavasini/profileanalyzer-service

            - name: Build and Push RecommenderService Production Image
              working-directory: ./RecommenderService
              run: |
                  docker build -t cavasini/recommender-service .
                  docker push cavasini/recommender-service

    # deploy:
    #   runs-on: ubuntu-latest
    #   needs: build_and_push_docker_images # Este job só será executado após 'build_and_push_docker_images' ser concluído com sucesso
    #   environment: production # Opcional: Define um ambiente no GitHub para gerenciar segredos e revisores
    #   steps:
    #     - name: Deploy to Production Environment
    #       run: |
    #         # **Comandos de deploy para produção**
    #         # Isso pode envolver:
    #         # - Atualizar um Kubernetes deployment (kubectl apply -f your-deployment.yaml)
    #         # - Usar Terraform para provisionar/atualizar infra
    #         # - Executar um script de deploy via SSH para VMs
    #         # - Chamar uma API de deployment (e.g., AWS ECS, Azure App Service)
    #         echo "Deploying to production environment using image tag: ${{ github.sha }}"
    #         # Exemplo: kubectl set image deployment/investment-data-service investment-data-service=your_docker_hub_username/investmentdataservice:${{ github.sha }}
    #       env:
    #         KUBECONFIG_BASE64: ${{ secrets.KUBECONFIG_PROD }} # Exemplo de segredo para credenciais de deploy
